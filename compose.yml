services:
  postgres:
    image: postgres:15
    container_name: ems_pg
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ems
      POSTGRES_PASSWORD: password
      PGDATA: /var/lib/postgresql/data
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - ems-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: ems_zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - ems-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: ems_kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: ems_zookeeper:2181

      # Map the two listener types
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT

      # Internal listener for Docker network; external for localhost
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://ems_kafka:9092,PLAINTEXT_HOST://localhost:29092

      # Use the internal listener for inter-broker communication
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT

      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - ems-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: ems_kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: ems_kafka:9092
#      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - ems-network
    depends_on:
      kafka:
        condition: service_healthy

volumes:
  postgres-data:

networks:
  ems-network:
    driver: bridge